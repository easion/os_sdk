#include <pthread.h>
#include <sys/types.h>
#include <stddef.h>
#include <syscalls.h>

/* For printf. REMOVE WHEN ALL IMPLEMENTED */
#include <stdio.h>

#define UNIMPL printf(__func__)

void pthread_cleanup_push(void (*routine)(void*),void* arg)
{
	UNIMPL;
}

void pthread_cleanup_pop(int execute)
{
	UNIMPL;
}

int pthread_create(pthread_t thread,const pthread_attr_t* attr,void* (*startRoutine)(void*),void* args)
{
	return SysCreateThread((DWORD)startRoutine, 0, args);
}

int pthread_join(pthread_t thread,void** valuePtr)
{
	UNIMPL;
}

int pthread_detach(pthread_t thread)
{
	UNIMPL;
}

int pthread_getattr_np(pthread_t thread,pthread_attr_t* attr)
{
	UNIMPL;
}

int pthread_sigmask(int how,const sigset_t* set,sigset_t* oset)
{
	UNIMPL;
}

int pthread_key_create(pthread_key_t* key,void (*destructor)(void*))
{
	UNIMPL;
}

int pthread_key_delete(pthread_key_t key)
{
	UNIMPL;
}

int pthread_setspecific(pthread_key_t key,const void* value)
{
	UNIMPL;
}

void* pthread_getspecific(pthread_key_t key)
{
	UNIMPL;
}

int pthread_attr_setstacksize(pthread_attr_t* attr,size_t stackSize)
{
	UNIMPL;
}

int pthread_kill(pthread_t thread,int sig)
{
	UNIMPL;
}

int pthread_mutexattr_init(pthread_mutexattr_t* attr)
{
	UNIMPL;
}

int pthread_mutexattr_destroy(pthread_mutexattr_t* attr)
{
	UNIMPL;
}

int pthread_mutexattr_gettype(const pthread_mutexattr_t* attr,int* type)
{
	UNIMPL;
}

int pthread_mutexattr_settype(pthread_mutexattr_t* attr,int type)
{
	UNIMPL;
}

void pthread_exit(void* retval)
{
	UNIMPL;
}

int pthread_cancel(pthread_t thread)
{
	UNIMPL;
}

pthread_t pthread_self(void)
{
	return SysGetCurrentThreadID();
}
